# ü§ñ Coding Jr Chat - AI-Powered Coding Assistant

![VS Code Extension](https://img.shields.io/badge/VS%20Code-Extension-blue)
![Gemini AI](https://img.shields.io/badge/Powered%20by-Gemini%20AI-orange)
![Version](https://img.shields.io/badge/Version-0## ‚ùì Frequently Asked Questions

<details>
<summary><b>How secure is my API key?</b></summary>
Your Gemini API key is stored securely in VS Code's settings storage. It is never transmitted anywhere except directly to Google's API servers when making requests.
</details>

<details>
<summary><b>Does the extension work offline?</b></summary>
No, an internet connection is required to communicate with the Google Gemini API servers.
</details>

<details>
<summary><b>How much does it cost to use?</b></summary>
The extension itself is free, but you'll need a Google Gemini API key which may have associated costs depending on your usage level. Google offers a free tier with limited requests per month.
</details>

<details>
<summary><b>Can I use it with other AI models?</b></summary>
Currently, the extension only supports Google's Gemini model. Support for additional models is planned for future releases.
</details>

<details>
<summary><b>How is this different from GitHub Copilot?</b></summary>
While GitHub Copilot focuses on code completion and suggestions as you type, Coding Jr Chat offers a conversational interface where you can ask questions, get explanations, and request code solutions through natural language.
</details>

## üë• Contribution

This project was developed as an internship assignment demonstrating AI integration capabilities in developer tools. It showcases modern extension development practices, API integration, and UI design within VS Code.

### Project Lead

- [Your Name] - Developer and Designer

### Acknowledgments

- Google Gemini API for the powerful language model
- VS Code Extension API for the framework

---

<div align="center">
<p>¬© 2025 Coding Jr Chat | Made with ‚ù§Ô∏è for productive coding</p>
</div>

> A seamless VS Code extension that integrates Google's advanced Gemini 1.5 Flash AI model directly into your development environment, revolutionizing how you code with real-time AI assistance.

<div align="center">
    <img src="https://via.placeholder.com/800x400?text=Coding+Jr+Chat+Demo" alt="Coding Jr Chat in action" width="800"/>
    <p><i>Coding Jr Chat in action - seamless AI assistance right in your editor</i></p>
</div>

## ‚ú® Features

- **üîÑ Real-time AI Chat Interface** - Communicate with Gemini AI without leaving your editor
- **üöÄ Powered by Google's Gemini 1.5 Flash** - One of the most advanced AI models available
- **üíª Code-Aware Responses** - Get intelligent coding assistance tailored to your needs
- **üé® Clean & Intuitive UI** - Distraction-free interface that fits seamlessly into VS Code
- **‚öôÔ∏è Customizable Settings** - Configure the AI to work the way you want

### üìä Why Choose Coding Jr Chat?

| Feature | Coding Jr Chat | Standard AI Tools | Browser-Based AI |
|---------|:-------------:|:-----------------:|:----------------:|
| **Native VS Code Integration** | ‚úÖ | ‚ùå | ‚ùå |
| **Context Switching** | Minimal | High | Very High |
| **Development Workflow Impact** | Seamless | Disruptive | Very Disruptive |
| **Setup Complexity** | Simple | Moderate | Varies |
| **Performance** | Fast | Varies | Browser-dependent |
| **Privacy** | API key only | Account Required | Account Required |
| **Cost** | Pay-as-you-go API | Subscription | Freemium/Subscription |

## üìã Technical Implementation

### System Workflow

```mermaid
graph LR
    A[User Input] --> B[VS Code Extension]
    B --> C[Gemini API]
    C --> D[AI Response]
    D --> B
    B --> E[UI Display]
    E --> A
```

### Architecture

The extension follows a clean, modular architecture:

```
CHATBOT/
‚îú‚îÄ‚îÄ media/            # Frontend assets (styles, scripts)
‚îÇ   ‚îú‚îÄ‚îÄ main.js       # Webview client-side JavaScript 
‚îÇ   ‚îî‚îÄ‚îÄ style.css     # UI styling
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ extension.ts  # Core extension functionality
‚îÇ   ‚îî‚îÄ‚îÄ test/         # Test files
‚îî‚îÄ‚îÄ out/              # Compiled JavaScript (build output)
```

### Key Components

1. **Extension Activation (extension.ts)**
   - Registers command for opening the chat panel
   - Handles VS Code lifecycle events

2. **ChatPanel Class**
   - Core component managing the chat interface
   - Implements the WebView panel for UI rendering
   - Handles messaging between VS Code and webview

3. **API Integration**
   - Direct integration with Google Gemini API
   - Secure API key management through VS Code settings
   - Error handling and response processing

## üîß Requirements

- **Visual Studio Code** 1.101.0 or higher
- **Google Gemini API Key** (obtained from [Google AI Studio](https://makersuite.google.com/))
- **Node.js** and **npm** (for development only)

## üöÄ Setup & Installation

### For Users

1. **Install the Extension**:
   - Open VS Code
   - Navigate to Extensions tab (or press `Ctrl+Shift+X`)
   - Search for "Coding Jr Chat"
   - Click "Install"

2. **Configure Your API Key**:
   - Go to Settings > Extensions > Coding Jr Chat
   - Enter your Google Gemini API key in the `codingJrChat.geminiApiKey` field
   - The API key is stored securely in VS Code's settings

3. **Launch the Chat Interface**:
   - Use the command palette (`Ctrl+Shift+P`)
   - Search for "Open Chat Bot"
   - Click to open the chat panel

### For Developers

```bash
# Clone the repository
git clone https://github.com/sreejit-sadhukhan00/vscodextension.git

# Navigate to project directory
cd CHATBOT

# Install dependencies
npm install

# Compile the extension
npm run compile

# Package the extension
npm run package
```

## üí¨ How to Use

1. **Open the Chat Interface**:
   - Use the command palette (`Ctrl+Shift+P`) 
   - Type "Open Chat Bot" and press Enter
   - The chat panel will open in your VS Code window

2. **Ask Questions or Request Code**:
   - Type your programming questions or code requests
   - Example prompts:
     - "How do I implement a binary search in JavaScript?"
     - "Create a React component for a login form"
     - "Help me optimize this function: [paste code]"

3. **View and Use AI Responses**:
   - The AI will provide detailed responses with explanations
   - Code snippets are displayed with syntax highlighting
   - Copy code directly from the chat to use in your project

## üîç Technical Deep Dive

### Code Flow

1. **Activation Flow**:
   ```
   VS Code Startup ‚Üí Extension Activation ‚Üí Command Registration
   ```

2. **Chat Panel Creation**:
   ```
   User Command ‚Üí Panel Creation ‚Üí Webview Initialization ‚Üí HTML Rendering
   ```

3. **Message Processing**:
   ```
   User Input ‚Üí Webview ‚Üí Extension ‚Üí API Request ‚Üí Response ‚Üí Webview Display
   ```

### Key Implementation Features

#### Secure API Integration
```typescript
private async _callGeminiAPI(prompt: string): Promise<{ text: string }> {
    // API key retrieval from secure storage
    const apiKey = vscode.workspace.getConfiguration('codingJrChat')
                           .get<string>('geminiApiKey');
    
    // API request with proper error handling
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
        // Implementation details...
    });
    
    // Response processing and validation
    // Error handling and user feedback
}
```

#### Responsive UI Design
The extension uses a clean, responsive design pattern with:
- Message containers for conversation history
- Real-time response rendering
- Input field with validation
- Session persistence within the editor

### Error Handling Strategy

- **API Key Validation** - Checks for missing or invalid API keys
- **Network Error Recovery** - Handles timeouts and connection issues
- **Response Validation** - Ensures responses match expected format
- **Clear User Feedback** - Informative error messages

2. **Ask Questions or Request Code**:
   - Type your programming questions or code requests
   - Example prompts:
     - "How do I implement a binary search in JavaScript?"
     - "Create a React component for a login form"
     - "Help me optimize this function: [paste code]"

3. **View and Use AI Responses**:
   - The AI will provide detailed responses with explanations
   - Code snippets are displayed with syntax highlighting
   - Copy code directly from the chat to use in your project

## ‚öôÔ∏è Extension Settings

This extension contributes the following settings:

* `codingJrChat.geminiApiKey`: Your Google Gemini API key
* More configuration options planned for future releases

## üë©‚Äçüíª Development Process

### Design Principles

1. **Simplicity** - Clean UI with minimal distractions
2. **Performance** - Lightweight with optimized API communication
3. **Security** - Secure handling of API keys and user data
4. **Extensibility** - Modular design for easy future enhancements

### Technologies Used

- **TypeScript** - Type-safe code for the extension
- **VS Code Webview API** - For creating the UI panel
- **Google Gemini API** - AI model provider
- **CSS** - Styling the chat interface
- **esbuild** - Modern JavaScript bundling

### Testing Methodology

- Unit tests for core functionality
- Manual testing of UI components and interactions
- API response validation and error handling tests

## üìà Future Enhancements

- **File Context Integration** - Allow AI to analyze open files for better assistance
- **Code Action Integration** - Implement code fixes and suggestions
- **Conversation History** - Save and restore chat sessions
- **Customizable AI Parameters** - Allow users to adjust temperature, tokens, etc.
- **Multiple Model Support** - Integration with additional AI models

## üìÑ Release Notes

### 0.0.1 (June 2025)

- Initial release with core chat functionality
- Google Gemini 1.5 Flash integration
- Basic settings configuration
- Chat interface with markdown support

---

## üë• Contribution

This project was developed as an internship assignment demonstrating AI integration capabilities in developer tools. Feedback and suggestions are welcome!

### Project Lead

- [SREEJIT SADHUKHAN] - Developer and Designer

### Acknowledgments

- Google Gemini API for the powerful language model
- VS Code Extension API for the framework
